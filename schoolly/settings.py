"""
Django settings for schoolly project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import environ



#setting the environment variables----
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
environ.Env.read_env()
#setting the environment variables END----



# Set the project base directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# # Take environment variables from .env file
# environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG_VALUE')


ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'staff.apps.StaffConfig',
    'students.apps.StudentsConfig',
    'curriculum.apps.CurriculumConfig',
    'pages.apps.PagesConfig',
    'exams.apps.ExamsConfig',
    'results.apps.ResultsConfig',
    'attendance.apps.AttendanceConfig',
    'inventory.apps.InventoryConfig',
    # 'demoschool.apps.DemoschoolConfig',
    'payment.apps.PaymentConfig',
    'crispy_forms',
    'storages',
    'quizes',
    'quiz_results',
    'quiz_questions',
    'portal',
    'blog',
    'notification',
    'django_filters',
    'ckeditor',
    # 'ckeditor_uploader',  #for ckeditor image upload
    'embed_video',
    # 'bootstrap_datepicker_plus',
    'rest_framework',
    'mathfilters',
    'import_export',
      
]
 


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'schoolly.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'schoolly.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
 
# DEVELOPMENT STATIC AND MEDIA CONFIGURATION
STATIC_URL = '/static/'
# STATIC_URL = 'https://schoolly.com.ng/portal/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



LOGIN_REDIRECT_URL = 'portal:portal-home'
LOGIN_URL = 'login'


# # Testing Email Setting
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = '1025'
# EMAIL_HOST_USER = ''
# EMAIL_HOST_PASSWORD =''
# EMAIL_USE_TSL = False
# # EMAIL_USE_SSL = False


# # Gmail Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# # EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# # #hiding the email user and password in environment variables
# # EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
# # EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
# # EMAIL_HOST = os.environ.get('EMAIL_HOST')
# #not advisable to put your raw user and password
# # EMAIL_HOST_USER = 'contact'
# # EMAIL_HOST_PASSWORD = ''

# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
# EMAIL_HOST = os.environ.get('EMAIL_HOST')


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'dtechydude@gmail.com'
EMAIL_HOST_USER = 'schoollyapp@gmail.com'
# EMAIL_HOST_PASSWORD = 'eawtvpskkrujiwgo'
EMAIL_HOST_PASSWORD = 'oert qkpu unec rpqq'



# #AWS ACCESS
# AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')

# # # AWS without environment variable- Please use this during production
# AWS_ACCESS_KEY_ID = "AKIAU7WRHVNVL3BEVXXW"
# AWS_SECRET_ACCESS_KEY = "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"
# AWS_STORAGE_BUCKET_NAME = "django-schoolly-files"

# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL = None

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# #add region name to connect
# AWS_S3_REGION_NAME = 'us-east-2'
# AWS_S3_ADDRESSING_STYLE = 'virtual'


CRISPY_TEMPLATE_PACK = 'bootstrap4'

# django_heroku.settings(locals())



# CKEDITOR_CONFIGS = {
#     'default': {
#         'toolbar': 'Custom',
#         'width': '500px',
#         'height': '10%',
#         'toolbar_Custom': [
#             ['Bold', 'Italic', 'Underline'],
#             ['NumberedList', 'BulletedList'],

#         ],
#     }
#  }
# CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"


# # #AWS ACCESS WITH AWS MANAGEING STATIC FILES
# AWS_ACCESS_KEY_ID = "AKIASGDZDIWWIYUWBVN3"
# AWS_SECRET_ACCESS_KEY = "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"
# AWS_STORAGE_BUCKET_NAME = "schoolly"

# # # ADDITIONAL CONFIG FOR USING AWS_BUCKET FOR STATIC
# AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
# AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

# AWS_LOCATION = 'static'
# STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)

# # AWS without environment variable- Please use this during production
# # AWS_ACCESS_KEY_ID = "AKIAU7WRHVNVL3BEVXXW"
# # AWS_SECRET_ACCESS_KEY = "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"
# # # AWS_STORAGE_BUCKET_NAME = "django-schoolly-files"

# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL = None

# # # # # #add region name to connect
# AWS_S3_REGION_NAME = 'us-west-2'
# AWS_S3_ADDRESSING_STYLE = 'virtual'

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'



# STORAGES = {"staticfiles": {"BACKEND": "storages.backends.s3boto3.S3StaticStorage"}}

IMPORT_EXPORT_IMPORT_PERMISSION_CODE = 'delete' 
IMPORT_EXPORT_EXPORT_PERMISSION_CODE = 'delete'